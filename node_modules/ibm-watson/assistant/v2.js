"use strict";
/**
 * (C) Copyright IBM Corp. 2018, 2019.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var ibm_cloud_sdk_core_2 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * The IBM Watson&trade; Assistant service combines machine learning, natural language understanding, and an integrated
 * dialog editor to create conversation flows between your apps and your users.
 *
 * The Assistant v2 API provides runtime methods your client application can use to send user input to an assistant and
 * receive a response.
 */
var AssistantV2 = /** @class */ (function (_super) {
    __extends(AssistantV2, _super);
    /**
     * Construct a AssistantV2 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} options.version - The API version date to use with the service, in "YYYY-MM-DD" format. Whenever
     * the API is changed in a backwards incompatible way, a new minor version of the API is released. The service uses
     * the API version for the date you specify, or the most recent version before that date. Note that you should not
     * programmatically specify the current date at runtime, in case the API has been updated since your application's
     * release. Instead, specify a version date that is compatible with your application, and don't change it until your
     * application is ready for a later version.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service (e.g. 'https://gateway.watsonplatform.net/assistant/api'). The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service. Defaults to environment if not set
     * @constructor
     * @returns {AssistantV2}
     * @throws {Error}
     */
    function AssistantV2(options) {
        var _this = this;
        // If the caller didn't supply an authenticator, construct one from external configuration.
        if (!options.authenticator) {
            options.authenticator = ibm_cloud_sdk_core_2.getAuthenticatorFromEnvironment('conversation');
        }
        _this = _super.call(this, options) || this;
        // check if 'version' was provided
        if (typeof _this.baseOptions.version === 'undefined') {
            throw new Error('Argument error: version was not specified');
        }
        _this.baseOptions.qs.version = options.version;
        return _this;
    }
    /*************************
     * sessions
     ************************/
    /**
     * Create a session.
     *
     * Create a new session. A session is used to send user input to a skill and receive responses. It also maintains the
     * state of the conversation.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - Unique identifier of the assistant. To find the assistant ID in the Watson
     * Assistant user interface, open the assistant settings and click **API Details**. For information about creating
     * assistants, see the
     * [documentation](https://cloud.ibm.com/docs/services/assistant?topic=assistant-assistant-add#assistant-add-task).
     *
     * **Note:** Currently, the v2 API does not support creating assistants.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    AssistantV2.prototype.createSession = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['assistantId'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var path = {
                'assistant_id': _params.assistantId
            };
            var sdkHeaders = common_1.getSdkHeaders('conversation', 'v2', 'createSession');
            var parameters = {
                options: {
                    url: '/v2/assistants/{assistant_id}/sessions',
                    method: 'POST',
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /**
     * Delete session.
     *
     * Deletes a session explicitly before it times out.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - Unique identifier of the assistant. To find the assistant ID in the Watson
     * Assistant user interface, open the assistant settings and click **API Details**. For information about creating
     * assistants, see the
     * [documentation](https://cloud.ibm.com/docs/services/assistant?topic=assistant-assistant-add#assistant-add-task).
     *
     * **Note:** Currently, the v2 API does not support creating assistants.
     * @param {string} params.sessionId - Unique identifier of the session.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    AssistantV2.prototype.deleteSession = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['assistantId', 'sessionId'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var path = {
                'assistant_id': _params.assistantId,
                'session_id': _params.sessionId
            };
            var sdkHeaders = common_1.getSdkHeaders('conversation', 'v2', 'deleteSession');
            var parameters = {
                options: {
                    url: '/v2/assistants/{assistant_id}/sessions/{session_id}',
                    method: 'DELETE',
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /*************************
     * message
     ************************/
    /**
     * Send user input to assistant.
     *
     * Send user input to an assistant and receive a response.
     *
     * There is no rate limit for this operation.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - Unique identifier of the assistant. To find the assistant ID in the Watson
     * Assistant user interface, open the assistant settings and click **API Details**. For information about creating
     * assistants, see the
     * [documentation](https://cloud.ibm.com/docs/services/assistant?topic=assistant-assistant-add#assistant-add-task).
     *
     * **Note:** Currently, the v2 API does not support creating assistants.
     * @param {string} params.sessionId - Unique identifier of the session.
     * @param {MessageInput} [params.input] - An input object that includes the input text.
     * @param {MessageContext} [params.context] - State information for the conversation. The context is stored by the
     * assistant on a per-session basis. You can use this property to set or modify context variables, which can also be
     * accessed by dialog nodes.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    AssistantV2.prototype.message = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['assistantId', 'sessionId'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var body = {
                'input': _params.input,
                'context': _params.context
            };
            var path = {
                'assistant_id': _params.assistantId,
                'session_id': _params.sessionId
            };
            var sdkHeaders = common_1.getSdkHeaders('conversation', 'v2', 'message');
            var parameters = {
                options: {
                    url: '/v2/assistants/{assistant_id}/sessions/{session_id}/message',
                    method: 'POST',
                    body: body,
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    AssistantV2.URL = 'https://gateway.watsonplatform.net/assistant/api';
    return AssistantV2;
}(ibm_cloud_sdk_core_1.BaseService));
AssistantV2.prototype.name = 'conversation';
AssistantV2.prototype.serviceVersion = 'v2';
module.exports = AssistantV2;
//# sourceMappingURL=v2.js.map