"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var async = require("async");
var extend = require("extend");
var isStream = require("isstream");
var common_1 = require("../lib/common");
var RecognizeStream = require("../lib/recognize-stream");
var GeneratedSpeechToTextV1 = require("./v1-generated");
/**
 * Check if there is a corpus that is still being processed
 * @private
 * @param corporaList
 * @return {boolean}
 */
function isProcessing(corporaList) {
    return corporaList.corpora.some(function (record) { return record['status'] === 'being_processed'; });
}
/**
 * Check if corpora has been analyzed
 * @private
 * @param corporaList
 * @return {boolean}
 */
function isAnalyzed(corporaList) {
    return corporaList.corpora.some(function (record) { return record['status'] === 'analyzed'; });
}
var SpeechToTextV1 = /** @class */ (function (_super) {
    __extends(SpeechToTextV1, _super);
    function SpeechToTextV1(options) {
        return _super.call(this, options) || this;
    }
    /**
     * Waits while corpora analysis status is 'being_processes', fires callback once the status is 'analyzed'
     *
     * Note: the code will throw an error in case there in no corpus in the customization
     *
     *
     * @param {Object} params The parameters
     * @param {String} params.customization_id - The GUID of the custom language model
     * @param {Number} [params.interval=5000] - (milliseconds) - how long to wait between status checks
     * @param {Number} [params.times=30] - maximum number of attempts
     * @param {Function} callback
     */
    SpeechToTextV1.prototype.whenCorporaAnalyzed = function (params, callback) {
        var self = this;
        async.parallel([
            // validate that it has at least one corpus
            function (next) {
                self.listCorpora(params, function (err, res) {
                    var result = res.result;
                    if (err) {
                        return next(err);
                    }
                    if (!result.corpora.length) {
                        var sttError = new Error('Customization has no corpa and therefore corpus cannot be analyzed');
                        sttError.code = SpeechToTextV1.ERR_NO_CORPORA;
                        return next(sttError);
                    }
                    next(null);
                });
            },
            // check the customization status repeatedly until it's available
            function (next) {
                var options = extend({
                    interval: 5000,
                    times: 30
                }, params, {
                    errorFilter: function (err) {
                        // if it's a timeout error, then listCorpora is called again after params.interval
                        // otherwise the error is passed back to the user
                        // if the params.times limit is reached, the error will be passed to the user regardless
                        return err.code === SpeechToTextV1.ERR_TIMEOUT;
                    }
                });
                async.retry(options, function (done) {
                    self.listCorpora(params, function (err, res) {
                        var corpora = res.result;
                        if (err) {
                            done(err);
                        }
                        else if (corpora !== undefined && isProcessing(corpora)) {
                            // if the loop times out, async returns the last error, which will be this one.
                            var sttError = new Error('Corpora is still being processed, try increasing interval or times params');
                            sttError.code = SpeechToTextV1.ERR_TIMEOUT;
                            done(sttError);
                        }
                        else if (corpora !== undefined && isAnalyzed(corpora)) {
                            done(null, corpora);
                        }
                        else {
                            done(new Error('Unexpected corpus analysis status'));
                        }
                    });
                }, next);
            }
        ], function (err, res) {
            var result = res;
            if (err) {
                return callback(err);
            }
            callback(null, result[1]); // callback with the final customization object
        });
    };
    SpeechToTextV1.prototype.recognizeUsingWebSocket = function (params) {
        var streamParams = extend(params, {}, {
            // pass the Authenticator to the RecognizeStream object
            authenticator: this.getAuthenticator(),
            url: this.baseOptions.url,
            // if the user configured a custom https client, use it in the websocket method
            // let httpsAgent take precedence, default to null
            agent: this.baseOptions.httpsAgent || this.baseOptions.httpAgent || null,
            // allow user to disable ssl verification when using websockets
            disableSslVerification: this.baseOptions.disableSslVerification
        });
        // include analytics headers
        var sdkHeaders = common_1.getSdkHeaders('speech_to_text', 'v1', 'recognizeUsingWebSocket');
        streamParams.headers = extend(true, sdkHeaders, streamParams.headers);
        return new RecognizeStream(streamParams);
    };
    SpeechToTextV1.prototype.recognize = function (params, callback) {
        if (params && params.audio && isStream(params.audio) && !params.contentType) {
            callback(new Error('If providing `audio` as a Stream, `contentType` is required.'));
            return;
        }
        return _super.prototype.recognize.call(this, params, callback);
    };
    /**
     * Waits while a customization status is 'pending' or 'training', fires callback once the status is 'ready' or 'available'.
     *
     * Note: the customization will remain in 'pending' status until at least one word corpus is added.
     *
     * See http://www.ibm.com/watson/developercloud/speech-to-text/api/v1/#list_models for status details.
     *
     * @param {Object} params The parameters
     * @param {String} params.customization_id - The GUID of the custom language model
     * @param {Number} [params.interval=5000] - (milliseconds) - how log to wait between status checks
     * @param {Number} [params.times=30] - maximum number of attempts
     * @param {Function} callback
     */
    SpeechToTextV1.prototype.whenCustomizationReady = function (params, callback) {
        var self = this;
        // check the customization status repeatedly until it's ready or available
        var options = extend({
            interval: 5000,
            times: 30
        }, params, {
            errorFilter: function (err) {
                // if it's a timeout error, then getLanguageModel is called again after params.interval
                // otherwise the error is passed back to the user
                // if the params.times limit is reached, the error will be passed to the user regardless
                return err.code === SpeechToTextV1.ERR_TIMEOUT;
            }
        });
        async.retry(options, function (next) {
            self.getLanguageModel(params, function (err, res) {
                var customization = err ? null : res.result;
                if (err) {
                    next(err);
                }
                else if (customization.status === 'pending' ||
                    customization.status === 'training') {
                    // if the loop times out, async returns the last error, which will be this one.
                    var sttError = new Error('Customization is still pending, try increasing interval or times params');
                    sttError.code = SpeechToTextV1.ERR_TIMEOUT;
                    next(sttError);
                }
                else if (customization.status === 'ready' ||
                    customization.status === 'available') {
                    next(null, customization);
                }
                else if (customization.status === 'failed') {
                    next(new Error('Customization training failed'));
                }
                else {
                    next(new Error('Unexpected customization status: ' + customization.status));
                }
            });
        }, callback);
    };
    SpeechToTextV1.ERR_NO_CORPORA = 'ERR_NO_CORPORA';
    SpeechToTextV1.ERR_TIMEOUT = 'ERR_TIMEOUT';
    return SpeechToTextV1;
}(GeneratedSpeechToTextV1));
module.exports = SpeechToTextV1;
//# sourceMappingURL=v1.js.map