/**
 * (C) Copyright IBM Corp. 2018, 2019.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import { IncomingHttpHeaders, OutgoingHttpHeaders } from 'http';
import { BaseService, UserOptions } from 'ibm-cloud-sdk-core';
/**
 * IBM Watson&trade; Language Translator translates text from one language to another. The service offers multiple IBM
 * provided translation models that you can customize based on your unique terminology and language. Use Language
 * Translator to take news from across the globe and present it in your language, communicate with your customers in
 * their own language, and more.
 */
declare class LanguageTranslatorV3 extends BaseService {
    static URL: string;
    name: string;
    serviceVersion: string;
    /**
     * Construct a LanguageTranslatorV3 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} options.version - The API version date to use with the service, in "YYYY-MM-DD" format. Whenever
     * the API is changed in a backwards incompatible way, a new minor version of the API is released. The service uses
     * the API version for the date you specify, or the most recent version before that date. Note that you should not
     * programmatically specify the current date at runtime, in case the API has been updated since your application's
     * release. Instead, specify a version date that is compatible with your application, and don't change it until your
     * application is ready for a later version.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service (e.g. 'https://gateway.watsonplatform.net/language-translator/api'). The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service. Defaults to environment if not set
     * @constructor
     * @returns {LanguageTranslatorV3}
     * @throws {Error}
     */
    constructor(options: UserOptions);
    /*************************
     * translation
     ************************/
    /**
     * Translate.
     *
     * Translates the input text from the source language to the target language.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string[]} params.text - Input text in UTF-8 encoding. Multiple entries will result in multiple translations
     * in the response.
     * @param {string} [params.modelId] - A globally unique string that identifies the underlying model that is used for
     * translation.
     * @param {string} [params.source] - Translation source language code.
     * @param {string} [params.target] - Translation target language code.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    translate(params: LanguageTranslatorV3.TranslateParams, callback?: LanguageTranslatorV3.Callback<LanguageTranslatorV3.TranslationResult>): Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.TranslationResult>>;
    /*************************
     * identification
     ************************/
    /**
     * List identifiable languages.
     *
     * Lists the languages that the service can identify. Returns the language code (for example, `en` for English or `es`
     * for Spanish) and name of each language.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    listIdentifiableLanguages(params?: LanguageTranslatorV3.ListIdentifiableLanguagesParams, callback?: LanguageTranslatorV3.Callback<LanguageTranslatorV3.IdentifiableLanguages>): Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.IdentifiableLanguages>>;
    /**
     * Identify language.
     *
     * Identifies the language of the input text.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.text - Input text in UTF-8 format.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    identify(params: LanguageTranslatorV3.IdentifyParams, callback?: LanguageTranslatorV3.Callback<LanguageTranslatorV3.IdentifiedLanguages>): Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.IdentifiedLanguages>>;
    /*************************
     * models
     ************************/
    /**
     * List models.
     *
     * Lists available translation models.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.source] - Specify a language code to filter results by source language.
     * @param {string} [params.target] - Specify a language code to filter results by target language.
     * @param {boolean} [params._default] - If the default parameter isn't specified, the service will return all models
     * (default and non-default) for each language pair. To return only default models, set this to `true`. To return only
     * non-default models, set this to `false`. There is exactly one default model per language pair, the IBM provided
     * base model.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    listModels(params?: LanguageTranslatorV3.ListModelsParams, callback?: LanguageTranslatorV3.Callback<LanguageTranslatorV3.TranslationModels>): Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.TranslationModels>>;
    /**
     * Create model.
     *
     * Uploads Translation Memory eXchange (TMX) files to customize a translation model.
     *
     * You can either customize a model with a forced glossary or with a corpus that contains parallel sentences. To
     * create a model that is customized with a parallel corpus <b>and</b> a forced glossary, proceed in two steps:
     * customize with a parallel corpus first and then customize the resulting model with a glossary. Depending on the
     * type of customization and the size of the uploaded corpora, training can range from minutes for a glossary to
     * several hours for a large parallel corpus. You can upload a single forced glossary file and this file must be less
     * than <b>10 MB</b>. You can upload multiple parallel corpora tmx files. The cumulative file size of all uploaded
     * files is limited to <b>250 MB</b>. To successfully train with a parallel corpus you must have at least <b>5,000
     * parallel sentences</b> in your corpus.
     *
     * You can have a <b>maximum of 10 custom models per language pair</b>.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.baseModelId - The model ID of the model to use as the base for customization. To see
     * available models, use the `List models` method. Usually all IBM provided models are customizable. In addition, all
     * your models that have been created via parallel corpus customization, can be further customized with a forced
     * glossary.
     * @param {NodeJS.ReadableStream|Buffer} [params.forcedGlossary] - A TMX file with your customizations. The
     * customizations in the file completely overwrite the domain translaton data, including high frequency or high
     * confidence phrase translations. You can upload only one glossary with a file size less than 10 MB per call. A
     * forced glossary should contain single words or short phrases.
     * @param {NodeJS.ReadableStream|Buffer} [params.parallelCorpus] - A TMX file with parallel sentences for source and
     * target language. You can upload multiple parallel_corpus files in one request. All uploaded parallel_corpus files
     * combined, your parallel corpus must contain at least 5,000 parallel sentences to train successfully.
     * @param {string} [params.name] - An optional model name that you can use to identify the model. Valid characters are
     * letters, numbers, dashes, underscores, spaces and apostrophes. The maximum length is 32 characters.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    createModel(params: LanguageTranslatorV3.CreateModelParams, callback?: LanguageTranslatorV3.Callback<LanguageTranslatorV3.TranslationModel>): Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.TranslationModel>>;
    /**
     * Delete model.
     *
     * Deletes a custom translation model.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.modelId - Model ID of the model to delete.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    deleteModel(params: LanguageTranslatorV3.DeleteModelParams, callback?: LanguageTranslatorV3.Callback<LanguageTranslatorV3.DeleteModelResult>): Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.DeleteModelResult>>;
    /**
     * Get model details.
     *
     * Gets information about a translation model, including training status for custom models. Use this API call to poll
     * the status of your customization request. A successfully completed training will have a status of `available`.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.modelId - Model ID of the model to get.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    getModel(params: LanguageTranslatorV3.GetModelParams, callback?: LanguageTranslatorV3.Callback<LanguageTranslatorV3.TranslationModel>): Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.TranslationModel>>;
    /*************************
     * documentTranslation
     ************************/
    /**
     * List documents.
     *
     * Lists documents that have been submitted for translation.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    listDocuments(params?: LanguageTranslatorV3.ListDocumentsParams, callback?: LanguageTranslatorV3.Callback<LanguageTranslatorV3.DocumentList>): Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.DocumentList>>;
    /**
     * Translate document.
     *
     * Submit a document for translation. You can submit the document contents in the `file` parameter, or you can
     * reference a previously submitted document by document ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {NodeJS.ReadableStream|Buffer} params.file - The source file to translate.
     *
     * [Supported file
     * types](https://cloud.ibm.com/docs/services/language-translator?topic=language-translator-document-translator-tutorial#supported-file-formats)
     *
     * Maximum file size: **20 MB**.
     * @param {string} params.filename - The filename for file.
     * @param {string} [params.fileContentType] - The content type of file.
     * @param {string} [params.modelId] - The model to use for translation. `model_id` or both `source` and `target` are
     * required.
     * @param {string} [params.source] - Language code that specifies the language of the source document.
     * @param {string} [params.target] - Language code that specifies the target language for translation.
     * @param {string} [params.documentId] - To use a previously submitted document as the source for a new translation,
     * enter the `document_id` of the document.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    translateDocument(params: LanguageTranslatorV3.TranslateDocumentParams, callback?: LanguageTranslatorV3.Callback<LanguageTranslatorV3.DocumentStatus>): Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.DocumentStatus>>;
    /**
     * Get document status.
     *
     * Gets the translation status of a document.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.documentId - The document ID of the document.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    getDocumentStatus(params: LanguageTranslatorV3.GetDocumentStatusParams, callback?: LanguageTranslatorV3.Callback<LanguageTranslatorV3.DocumentStatus>): Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.DocumentStatus>>;
    /**
     * Delete document.
     *
     * Deletes a document.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.documentId - Document ID of the document to delete.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    deleteDocument(params: LanguageTranslatorV3.DeleteDocumentParams, callback?: LanguageTranslatorV3.Callback<LanguageTranslatorV3.Empty>): Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.Empty>>;
    /**
     * Get translated document.
     *
     * Gets the translated document associated with the given document ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.documentId - The document ID of the document that was submitted for translation.
     * @param {string} [params.accept] - The type of the response: application/powerpoint, application/mspowerpoint,
     * application/x-rtf, application/json, application/xml, application/vnd.ms-excel,
     * application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-powerpoint,
     * application/vnd.openxmlformats-officedocument.presentationml.presentation, application/msword,
     * application/vnd.openxmlformats-officedocument.wordprocessingml.document,
     * application/vnd.oasis.opendocument.spreadsheet, application/vnd.oasis.opendocument.presentation,
     * application/vnd.oasis.opendocument.text, application/pdf, application/rtf, text/html, text/json, text/plain,
     * text/richtext, text/rtf, or text/xml. A character encoding can be specified by including a `charset` parameter. For
     * example, 'text/html;charset=utf-8'.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    getTranslatedDocument(params: LanguageTranslatorV3.GetTranslatedDocumentParams, callback?: LanguageTranslatorV3.Callback<NodeJS.ReadableStream | Buffer>): Promise<LanguageTranslatorV3.Response<NodeJS.ReadableStream | Buffer>>;
}
/*************************
 * interfaces
 ************************/
declare namespace LanguageTranslatorV3 {
    /** An operation response. **/
    interface Response<T = any> {
        result: T;
        status: number;
        statusText: string;
        headers: IncomingHttpHeaders;
    }
    /** The callback for a service request. */
    type Callback<T> = (error: any, response?: Response<T>) => void;
    /** The body of a service request that returns no response data. */
    interface Empty {
    }
    /** A standard JS object, defined to avoid the limitations of `Object` and `object` */
    interface JsonObject {
        [key: string]: any;
    }
    /*************************
     * request interfaces
     ************************/
    /** Parameters for the `translate` operation. */
    interface TranslateParams {
        /** Input text in UTF-8 encoding. Multiple entries will result in multiple translations in the response. */
        text: string[];
        /** A globally unique string that identifies the underlying model that is used for translation. */
        modelId?: string;
        /** Translation source language code. */
        source?: string;
        /** Translation target language code. */
        target?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `listIdentifiableLanguages` operation. */
    interface ListIdentifiableLanguagesParams {
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `identify` operation. */
    interface IdentifyParams {
        /** Input text in UTF-8 format. */
        text: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `listModels` operation. */
    interface ListModelsParams {
        /** Specify a language code to filter results by source language. */
        source?: string;
        /** Specify a language code to filter results by target language. */
        target?: string;
        /** If the default parameter isn't specified, the service will return all models (default and non-default) for
         *  each language pair. To return only default models, set this to `true`. To return only non-default models, set
         *  this to `false`. There is exactly one default model per language pair, the IBM provided base model.
         */
        _default?: boolean;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `createModel` operation. */
    interface CreateModelParams {
        /** The model ID of the model to use as the base for customization. To see available models, use the `List
         *  models` method. Usually all IBM provided models are customizable. In addition, all your models that have been
         *  created via parallel corpus customization, can be further customized with a forced glossary.
         */
        baseModelId: string;
        /** A TMX file with your customizations. The customizations in the file completely overwrite the domain
         *  translaton data, including high frequency or high confidence phrase translations. You can upload only one
         *  glossary with a file size less than 10 MB per call. A forced glossary should contain single words or short
         *  phrases.
         */
        forcedGlossary?: NodeJS.ReadableStream | Buffer;
        /** A TMX file with parallel sentences for source and target language. You can upload multiple parallel_corpus
         *  files in one request. All uploaded parallel_corpus files combined, your parallel corpus must contain at least
         *  5,000 parallel sentences to train successfully.
         */
        parallelCorpus?: NodeJS.ReadableStream | Buffer;
        /** An optional model name that you can use to identify the model. Valid characters are letters, numbers,
         *  dashes, underscores, spaces and apostrophes. The maximum length is 32 characters.
         */
        name?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `deleteModel` operation. */
    interface DeleteModelParams {
        /** Model ID of the model to delete. */
        modelId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getModel` operation. */
    interface GetModelParams {
        /** Model ID of the model to get. */
        modelId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `listDocuments` operation. */
    interface ListDocumentsParams {
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `translateDocument` operation. */
    interface TranslateDocumentParams {
        /** The source file to translate.
         *
         *  [Supported file
         *  types](https://cloud.ibm.com/docs/services/language-translator?topic=language-translator-document-translator-tutorial#supported-file-formats)
         *
         *  Maximum file size: **20 MB**.
         */
        file: NodeJS.ReadableStream | Buffer;
        /** The filename for file. */
        filename: string;
        /** The content type of file. */
        fileContentType?: TranslateDocumentConstants.FileContentType | string;
        /** The model to use for translation. `model_id` or both `source` and `target` are required. */
        modelId?: string;
        /** Language code that specifies the language of the source document. */
        source?: string;
        /** Language code that specifies the target language for translation. */
        target?: string;
        /** To use a previously submitted document as the source for a new translation, enter the `document_id` of the
         *  document.
         */
        documentId?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `translateDocument` operation. */
    namespace TranslateDocumentConstants {
        /** The content type of file. */
        enum FileContentType {
            APPLICATION_POWERPOINT = "application/powerpoint",
            APPLICATION_MSPOWERPOINT = "application/mspowerpoint",
            APPLICATION_X_RTF = "application/x-rtf",
            APPLICATION_JSON = "application/json",
            APPLICATION_XML = "application/xml",
            APPLICATION_VND_MS_EXCEL = "application/vnd.ms-excel",
            APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            APPLICATION_VND_MS_POWERPOINT = "application/vnd.ms-powerpoint",
            APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION = "application/vnd.openxmlformats-officedocument.presentationml.presentation",
            APPLICATION_MSWORD = "application/msword",
            APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT = "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET = "application/vnd.oasis.opendocument.spreadsheet",
            APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION = "application/vnd.oasis.opendocument.presentation",
            APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT = "application/vnd.oasis.opendocument.text",
            APPLICATION_PDF = "application/pdf",
            APPLICATION_RTF = "application/rtf",
            TEXT_HTML = "text/html",
            TEXT_JSON = "text/json",
            TEXT_PLAIN = "text/plain",
            TEXT_RICHTEXT = "text/richtext",
            TEXT_RTF = "text/rtf",
            TEXT_XML = "text/xml"
        }
    }
    /** Parameters for the `getDocumentStatus` operation. */
    interface GetDocumentStatusParams {
        /** The document ID of the document. */
        documentId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `deleteDocument` operation. */
    interface DeleteDocumentParams {
        /** Document ID of the document to delete. */
        documentId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getTranslatedDocument` operation. */
    interface GetTranslatedDocumentParams {
        /** The document ID of the document that was submitted for translation. */
        documentId: string;
        /** The type of the response: application/powerpoint, application/mspowerpoint, application/x-rtf,
         *  application/json, application/xml, application/vnd.ms-excel,
         *  application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-powerpoint,
         *  application/vnd.openxmlformats-officedocument.presentationml.presentation, application/msword,
         *  application/vnd.openxmlformats-officedocument.wordprocessingml.document,
         *  application/vnd.oasis.opendocument.spreadsheet, application/vnd.oasis.opendocument.presentation,
         *  application/vnd.oasis.opendocument.text, application/pdf, application/rtf, text/html, text/json, text/plain,
         *  text/richtext, text/rtf, or text/xml. A character encoding can be specified by including a `charset` parameter.
         *  For example, 'text/html;charset=utf-8'.
         */
        accept?: GetTranslatedDocumentConstants.Accept | string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `getTranslatedDocument` operation. */
    namespace GetTranslatedDocumentConstants {
        /** The type of the response: application/powerpoint, application/mspowerpoint, application/x-rtf, application/json, application/xml, application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-powerpoint, application/vnd.openxmlformats-officedocument.presentationml.presentation, application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document, application/vnd.oasis.opendocument.spreadsheet, application/vnd.oasis.opendocument.presentation, application/vnd.oasis.opendocument.text, application/pdf, application/rtf, text/html, text/json, text/plain, text/richtext, text/rtf, or text/xml. A character encoding can be specified by including a `charset` parameter. For example, 'text/html;charset=utf-8'. */
        enum Accept {
            APPLICATION_POWERPOINT = "application/powerpoint",
            APPLICATION_MSPOWERPOINT = "application/mspowerpoint",
            APPLICATION_X_RTF = "application/x-rtf",
            APPLICATION_JSON = "application/json",
            APPLICATION_XML = "application/xml",
            APPLICATION_VND_MS_EXCEL = "application/vnd.ms-excel",
            APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            APPLICATION_VND_MS_POWERPOINT = "application/vnd.ms-powerpoint",
            APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION = "application/vnd.openxmlformats-officedocument.presentationml.presentation",
            APPLICATION_MSWORD = "application/msword",
            APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT = "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET = "application/vnd.oasis.opendocument.spreadsheet",
            APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION = "application/vnd.oasis.opendocument.presentation",
            APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT = "application/vnd.oasis.opendocument.text",
            APPLICATION_PDF = "application/pdf",
            APPLICATION_RTF = "application/rtf",
            TEXT_HTML = "text/html",
            TEXT_JSON = "text/json",
            TEXT_PLAIN = "text/plain",
            TEXT_RICHTEXT = "text/richtext",
            TEXT_RTF = "text/rtf",
            TEXT_XML = "text/xml"
        }
    }
    /*************************
     * model interfaces
     ************************/
    /** DeleteModelResult. */
    interface DeleteModelResult {
        /** "OK" indicates that the model was successfully deleted. */
        status: string;
    }
    /** DocumentList. */
    interface DocumentList {
        /** An array of all previously submitted documents. */
        documents: DocumentStatus[];
    }
    /** Document information, including translation status. */
    interface DocumentStatus {
        /** System generated ID identifying a document being translated using one specific translation model. */
        document_id: string;
        /** filename from the submission (if it was missing in the multipart-form, 'noname.<ext matching content type>'
         *  is used.
         */
        filename: string;
        /** The status of the translation job associated with a submitted document. */
        status: string;
        /** A globally unique string that identifies the underlying model that is used for translation. */
        model_id: string;
        /** Model ID of the base model that was used to customize the model. If the model is not a custom model, this
         *  will be absent or an empty string.
         */
        base_model_id?: string;
        /** Translation source language code. */
        source: string;
        /** Translation target language code. */
        target: string;
        /** The time when the document was submitted. */
        created: string;
        /** The time when the translation completed. */
        completed?: string;
        /** The number of words in the source document, present only if status=available. */
        word_count?: number;
        /** The number of characters in the source document, present only if status=available. */
        character_count?: number;
    }
    /** IdentifiableLanguage. */
    interface IdentifiableLanguage {
        /** The language code for an identifiable language. */
        language: string;
        /** The name of the identifiable language. */
        name: string;
    }
    /** IdentifiableLanguages. */
    interface IdentifiableLanguages {
        /** A list of all languages that the service can identify. */
        languages: IdentifiableLanguage[];
    }
    /** IdentifiedLanguage. */
    interface IdentifiedLanguage {
        /** The language code for an identified language. */
        language: string;
        /** The confidence score for the identified language. */
        confidence: number;
    }
    /** IdentifiedLanguages. */
    interface IdentifiedLanguages {
        /** A ranking of identified languages with confidence scores. */
        languages: IdentifiedLanguage[];
    }
    /** Translation. */
    interface Translation {
        /** Translation output in UTF-8. */
        translation: string;
    }
    /** Response payload for models. */
    interface TranslationModel {
        /** A globally unique string that identifies the underlying model that is used for translation. */
        model_id: string;
        /** Optional name that can be specified when the model is created. */
        name?: string;
        /** Translation source language code. */
        source?: string;
        /** Translation target language code. */
        target?: string;
        /** Model ID of the base model that was used to customize the model. If the model is not a custom model, this
         *  will be an empty string.
         */
        base_model_id?: string;
        /** The domain of the translation model. */
        domain?: string;
        /** Whether this model can be used as a base for customization. Customized models are not further customizable,
         *  and some base models are not customizable.
         */
        customizable?: boolean;
        /** Whether or not the model is a default model. A default model is the model for a given language pair that
         *  will be used when that language pair is specified in the source and target parameters.
         */
        default_model?: boolean;
        /** Either an empty string, indicating the model is not a custom model, or the ID of the service instance that
         *  created the model.
         */
        owner?: string;
        /** Availability of a model. */
        status?: string;
    }
    /** The response type for listing existing translation models. */
    interface TranslationModels {
        /** An array of available models. */
        models: TranslationModel[];
    }
    /** TranslationResult. */
    interface TranslationResult {
        /** Number of words in the input text. */
        word_count: number;
        /** Number of characters in the input text. */
        character_count: number;
        /** List of translation output in UTF-8, corresponding to the input text entries. */
        translations: Translation[];
    }
}
export = LanguageTranslatorV3;
