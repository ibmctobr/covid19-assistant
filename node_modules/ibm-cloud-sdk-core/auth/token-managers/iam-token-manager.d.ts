/**
 * Copyright 2019 IBM Corp. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { JwtTokenManager, TokenManagerOptions } from './jwt-token-manager';
interface Options extends TokenManagerOptions {
    apikey: string;
    clientId?: string;
    clientSecret?: string;
}
export interface IamTokenData {
    access_token: string;
    refresh_token: string;
    token_type: string;
    expires_in: number;
    expiration: number;
}
export declare class IamTokenManager extends JwtTokenManager {
    protected requiredOptions: string[];
    private apikey;
    private clientId;
    private clientSecret;
    /**
     * IAM Token Manager Service
     *
     * Retreives and stores IAM access tokens.
     *
     * @param {Object} options
     * @param {String} options.apikey
     * @param {String} options.iamAccessToken
     * @param {String} options.iamUrl - url of the iam api to retrieve tokens from
     * @constructor
     */
    constructor(options: Options);
    /**
     * Set the IAM 'client_id' and 'client_secret' values.
     * These values are used to compute the Authorization header used
     * when retrieving the IAM access token.
     * If these values are not set, no Authorization header will be
     * set on the request (it is not required).
     *
     * @param {string} clientId - The client id
     * @param {string} clientSecret - The client secret
     * @returns {void}
     */
    setClientIdAndSecret(clientId: string, clientSecret: string): void;
    /**
     * Request an IAM token using an API key.
     *
     * @returns {Promise}
     */
    protected requestToken(): Promise<any>;
}
export {};
