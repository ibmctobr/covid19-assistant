"use strict";
/**
 * Copyright 2019 IBM Corp. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var extend = require("extend");
var utils_1 = require("../utils");
var jwt_token_manager_1 = require("./jwt-token-manager");
var Cp4dTokenManager = /** @class */ (function (_super) {
    __extends(Cp4dTokenManager, _super);
    /**
     * ICP Token Manager Service
     *
     * Retreives and stores ICP access tokens.
     *
     * @param {Object} options
     * @param {String} options.username
     * @param {String} options.password
     * @param {String} options.accessToken - user-managed access token
     * @param {String} options.url - URL for the CP4D cluster
     * @param {Boolean} options.disableSslVerification - disable SSL verification for token request
     * @constructor
     */
    function Cp4dTokenManager(options) {
        var _this = _super.call(this, options) || this;
        _this.requiredOptions = ['username', 'password', 'url'];
        _this.tokenName = 'accessToken';
        utils_1.validateInput(options, _this.requiredOptions);
        var tokenApiPath = '/v1/preauth/validateAuth';
        // do not append the path if user already has
        if (_this.url && !_this.url.endsWith(tokenApiPath)) {
            _this.url = _this.url + tokenApiPath;
        }
        _this.username = options.username;
        _this.password = options.password;
        return _this;
    }
    /**
     * Request an CP4D token using a basic auth header.
     *
     * @returns {Promise}
     */
    Cp4dTokenManager.prototype.requestToken = function () {
        // these cannot be overwritten
        var requiredHeaders = {
            Authorization: utils_1.computeBasicAuthHeader(this.username, this.password),
        };
        var parameters = {
            options: {
                url: this.url,
                method: 'GET',
                headers: extend(true, {}, this.headers, requiredHeaders),
                rejectUnauthorized: !this.disableSslVerification,
            }
        };
        return this.requestWrapperInstance.sendRequest(parameters);
    };
    return Cp4dTokenManager;
}(jwt_token_manager_1.JwtTokenManager));
exports.Cp4dTokenManager = Cp4dTokenManager;
//# sourceMappingURL=cp4d-token-manager.js.map