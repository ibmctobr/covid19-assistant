"use strict";
/**
 * Copyright 2019 IBM Corp. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var extend = require("extend");
var token_managers_1 = require("../token-managers");
var authenticator_1 = require("./authenticator");
var TokenRequestBasedAuthenticator = /** @class */ (function (_super) {
    __extends(TokenRequestBasedAuthenticator, _super);
    /**
     * Request Based Authenticator Class
     *
     * Handles authentication patterns that invoke requests for bearer tokens.
     *
     * @param {Object} options
     * @constructor
     */
    function TokenRequestBasedAuthenticator(options) {
        var _this = _super.call(this) || this;
        _this.disableSslVerification = Boolean(options.disableSslVerification);
        _this.url = options.url;
        // default to empty object
        _this.headers = options.headers || {};
        // this class must be extended by a subclass - the JwtTokenManager
        // will fail upon requesting a token
        _this.tokenManager = new token_managers_1.JwtTokenManager(options);
        return _this;
    }
    /**
     * Setter for the disableSslVerification property.
     *
     * @param {boolean} value - the new value for the disableSslVerification property
     * @returns {void}
     */
    TokenRequestBasedAuthenticator.prototype.setDisableSslVerification = function (value) {
        // if they try to pass in a non-boolean value,
        // use the "truthy-ness" of the value
        this.disableSslVerification = Boolean(value);
        this.tokenManager.setDisableSslVerification(this.disableSslVerification);
    };
    /**
     * Set a completely new set of headers.
     *
     * @param {OutgoingHttpHeaders} headers - the new set of headers as an object
     * @returns {void}
     */
    TokenRequestBasedAuthenticator.prototype.setHeaders = function (headers) {
        if (typeof headers !== 'object') {
            // do nothing, for now
            return;
        }
        this.headers = headers;
        this.tokenManager.setHeaders(this.headers);
    };
    TokenRequestBasedAuthenticator.prototype.authenticate = function (options) {
        return this.tokenManager.getToken().then(function (token) {
            var authHeader = { Authorization: "Bearer " + token };
            options.headers = extend(true, {}, options.headers, authHeader);
            return;
        });
    };
    return TokenRequestBasedAuthenticator;
}(authenticator_1.Authenticator));
exports.TokenRequestBasedAuthenticator = TokenRequestBasedAuthenticator;
//# sourceMappingURL=token-request-based-authenticator.js.map