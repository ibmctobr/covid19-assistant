/**
 * Copyright 2014 IBM Corp. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import { OutgoingHttpHeaders } from 'http';
import { AuthenticatorInterface } from '../auth';
export interface UserOptions {
    /** The Authenticator object used to authenticate requests to the service */
    authenticator?: AuthenticatorInterface;
    /** The base url to use when contacting the service. The base url may differ between IBM Cloud regions. */
    serviceUrl?: string;
    /** Default headers that shall be included with every request to the service. */
    headers?: OutgoingHttpHeaders;
    /** The API version date to use with the service, in "YYYY-MM-DD" format. */
    version?: string;
    /** Set to `true` to allow unauthorized requests - not recommended for production use. */
    disableSslVerification?: boolean;
    /** Deprecated. Use `serviceUrl` instead. */
    url?: string;
    /** Allow additional request config parameters */
    [propName: string]: any;
}
export interface BaseServiceOptions extends UserOptions {
    qs: any;
}
export declare class BaseService {
    static URL: string;
    name: string;
    serviceVersion: string;
    protected baseOptions: BaseServiceOptions;
    private authenticator;
    private requestWrapperInstance;
    /**
     * Internal base class that other services inherit from
     * @param {UserOptions} options
     * @param {OutgoingHttpHeaders} [options.headers]
     * @param {string} [options.url] - override default service base url
     * @private
     * @abstract
     * @constructor
     * @throws {Error}
     * @returns {BaseService}
     */
    constructor(userOptions: UserOptions);
    /**
     * Get the instance of the authenticator set on the service.
     *
     * @returns {Authenticator}
     */
    getAuthenticator(): any;
    /**
     * Set the service URL to send requests to.
     *
     * @param {string} the base URL for the service
     */
    setServiceUrl(url: string): void;
    /**
     * Wrapper around `sendRequest` that enforces the request will be authenticated.
     *
     * @param {object} parameters - service request options passed in by user
     * @param {string} parameters.options.method - the http method
     * @param {string} parameters.options.url - the path portion of the URL to be appended to the serviceUr
     * @param {object} [parameters.options.path] - the path parameters to be inserted into the URL
     * @param {object} [parameters.options.qs] - the querystring to be included in the URL
     * @param {object} [parameters.options.body] - the data to be sent as the request body
     * @param {object} [parameters.options.form] - an object containing the key/value pairs for a www-form-urlencoded request
     * @param {object} [parameters.options.formData] - an object containing the contents for a multipart/form-data request
     * The following processing is performed on formData values:
     * - string: no special processing -- the value is sent as is
     * - object: the value is converted to a JSON string before insertion into the form body
     * - NodeJS.ReadableStream|Buffer|FileWithMetadata: sent as a file, with any associated metadata
     * - array: each element of the array is sent as a separate form part using any special processing as described above
     * @param {object} parameters.defaultOptions
     * @param {string} parameters.defaultOptions.serviceUrl - the base URL of the service
     * @param {OutgoingHttpHeaders} parameters.defaultOptions.headers - additional headers to be passed on the request
     * @returns {Promise<any>}
     */
    protected createRequest(parameters: any): Promise<any>;
    private readOptionsFromExternalConfig;
}
